
#- Only used for legacy syntax. Functionality is moved to encoder object
{%- if (homing) and (encoder.homing) %}
   # ERROR: Duplicate homing parameters identified (homing and encoder.homing)
   #        Homing parameters can only be defined at one place
   ecmcExit 
{%- endif %}

{% if homing -%}
    # WARNING: 
    # WARNING: Homing parameters should be defined in encoder instead
    # WARNING: 
    #- =============================================================================
    #- Homing
    #- =============================================================================

    {%- if homing.position is defined %}
        ecmcConfigOrDie "Cfg.SetAxisHomePosition({{ axis.id }},{{ homing.position }})"
        epicsEnvSet(HOME_POS, {{ homing.position }})
    {%- endif %}
    {%- if homing.postMoveEnable %}
        ecmcConfigOrDie "Cfg.SetAxisHomePostMoveEnable({{ axis.id }},{{ homing.postMoveEnable|int }})"
        ecmcConfigOrDie "Cfg.SetAxisHomePostMoveTargetPosition({{ axis.id }},{{ homing.postMovePosition|default(0)}})"
        epicsEnvSet(POST_ENA, {{ homing.postMoveEnable|int }})
        epicsEnvSet(POST_POS, {{ homing.postMovePosition|default(0) }})
    {%- endif %}

    {%- if homing.latchCount is defined %}
        ecmcConfigOrDie "Cfg.SetAxisHomeLatchCountOffset({{ axis.id }},{{ homing.latchCount }})"
    {%- endif %}
    {#- velocities  #}
    {%- if homing.velocity is defined %}
       {%- if homing.velocity.to is defined %}
          ecmcConfigOrDie "Cfg.SetAxisHomeVelTowardsCam({{ axis.id }},{{ homing.velocity.to }})"            
          epicsEnvSet(VEL_TO_CAM, {{homing.velocity.to}})
          #- Set default of VEL_FRM_CAM to VEL_TO_CAM
          epicsEnvSet(VEL_FRM_CAM, {{homing.velocity.to}})
          ecmcConfigOrDie "Cfg.SetAxisHomeVelOffCam({{ axis.id }},{{ homing.velocity.from|default(homing.velocity.to) }})"
       {%- endif %}
    {%- endif %}
    {%- if homing.timeout %}
        ecmcConfigOrDie "Cfg.SetAxisSeqTimeout({{ axis.id }},{{ homing.timeout }})"
    {%- endif %}
    {%- if homing.type is defined %}
        ecmcConfigOrDie "Cfg.SetAxisHomeSeqId({{ axis.id }},{{ homing.type }})"
        epicsEnvSet(HOME_PROC, {{ homing.type }})
    {%- endif %}
    {%- if homing.refToEncIDAtStartup is defined %}
        ecmcConfigOrDie "Cfg.SetAxisEncRefToOtherEncAtStartup({{ axis.id }},{{ homing.refToEncIDAtStartup }})"
        epicsEnvSet(REF_STRT, {{ homing.refToEncIDAtStartup }})
    {%- endif %}

    {%- if homing.refAtHome is defined %}
        ecmcConfigOrDie "Cfg.SetAxisEncEnableRefAtHome({{ axis.id }},{{ homing.refAtHome }})"
        epicsEnvSet(REF_HME, {{ homing.refAtHome }})
    {%- endif %}

    {%- if homing.tolToPrim is defined %}
        ecmcConfigOrDie "Cfg.SetAxisEncMaxDiffToPrimEnc({{ axis.id }},{{ homing.tolToPrim }})"
        epicsEnvSet(TOL_TO_REF, {{ homing.tolToPrim }})
    {%- endif %}

    {%- if homing.acc is defined %}
        epicsEnvSet(ACC, {{ homing.acc }})
        ecmcConfigOrDie "Cfg.SetAxisHomeAcc({{ axis.id }},{{ homing.acc }})"
    {%- endif %}
    {%- if homing.dec is defined %}
        epicsEnvSet(DEC, {{ homing.dec }})
        ecmcConfigOrDie "Cfg.SetAxisHomeDec({{ axis.id }},{{ homing.dec }})"
    {%- endif %}
{%- endif %}
