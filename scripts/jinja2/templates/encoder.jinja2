#- =============================================================================
#- Encoder
#- =============================================================================

#- Get current encoder index beeing configured (index of encoder added), needed for PV names
ecmcConfig "GetAxisEncConfigIndex($(ECMC_AXIS_NO))"
# Current encoder index beeing configured
epicsEnvShow(ECMC_CONFIG_RETURN_VAL)
epicsEnvSet(ECMC_ENC_CFG_ID,${ECMC_CONFIG_RETURN_VAL})

{#- links #}
{%- if encoder.position is not defined %}
    {%- if encoder.source == 0 %}
      # Error: encoder.source set to internal but no encoder.position link specified. Two options:
      #    1. Specify encoder.position link
      #    2. Set encoder.source to external (=1) and make sure the encoder actual value is set by PLC code.
      ecmcExit
    {%- else  %}
      # Warning: No encoder position link specified.
    {%- endif  %}
{%- else  %}
    ecmcConfigOrDie "Cfg.LinkEcEntryToObject("{{ encoder.position }}","ax${ECMC_AXIS_NO}.enc.actpos")"
{%- endif  %}

#- The base control word is not used in ecmc. All other bits are linked based on the the control word, see below..
#- {%- if encoder.control %}
#-     ecmcConfigOrDie "Cfg.LinkEcEntryToObject("{{ encoder.control }}","ax${ECMC_AXIS_NO}.enc.control")"
#- {%- endif %}
{#- scaling #}
ecmcConfigOrDie "Cfg.SetAxisEncScaleDenom(${ECMC_AXIS_NO},{{ encoder.denominator|float }})"
ecmcConfigOrDie "Cfg.SetAxisEncScaleNum(${ECMC_AXIS_NO},{{ encoder.numerator }})"
{#- source #}
ecmcConfigOrDie "Cfg.SetAxisEncSourceType(${ECMC_AXIS_NO},{{ encoder.source }})"
{#- data #}
ecmcConfigOrDie "Cfg.SetAxisEncType(${ECMC_AXIS_NO},{{ encoder.type }})"
ecmcConfigOrDie "Cfg.SetAxisEncBits(${ECMC_AXIS_NO},{{ encoder.bits }})"
{%- if encoder.type == 1  %}
    ecmcConfigOrDie "Cfg.SetAxisEncAbsBits(${ECMC_AXIS_NO},{{ encoder.absBits }})"
{%- endif  %}
ecmcConfigOrDie "Cfg.SetAxisEncOffset(${ECMC_AXIS_NO},{{ encoder.absOffset }})"
{#-{%- if encoder.mask %}#}
{#-ecmcConfigOrDie "Cfg.SetAxisEncRawMask(${ECMC_AXIS_NO}, {{ encoder.mask|int }})"#}
{#-{%- endif %}#}
{%- if encoder.reset is defined %}
    ecmcConfigOrDie "Cfg.LinkEcEntryToObject("{{ encoder.control }}.{{ encoder.reset }}","ax${ECMC_AXIS_NO}.enc.reset")"
{%- endif %}
{%- if encoder.warning is defined %}
    ecmcConfigOrDie "Cfg.LinkEcEntryToObject("{{ encoder.status }}.{{ encoder.warning }}","ax${ECMC_AXIS_NO}.enc.warning")"
{%- endif %}
{%- if encoder.ready is defined %}
    ecmcConfigOrDie "Cfg.LinkEcEntryToObject("{{ encoder.status }}.{{ encoder.ready }}","ax${ECMC_AXIS_NO}.enc.ready")"
{%- endif %}
{%- if encoder.error is defined %}
    {%- for bit in encoder.error %}
        {%- if bit is string %}
            ecmcConfigOrDie "Cfg.LinkEcEntryToObject("{{ bit }}","ax${ECMC_AXIS_NO}.enc.alarm{{loop.index0}}")"
        {%- else  %}
            ecmcConfigOrDie "Cfg.LinkEcEntryToObject("{{ encoder.status }}.{{ bit }}","ax${ECMC_AXIS_NO}.enc.alarm{{loop.index0}}")"
        {%- endif %}
    {%- endfor %}
{%- endif %}
{%- if encoder.latch %}
    ecmcConfigOrDie "Cfg.LinkEcEntryToObject("{{ encoder.latch.position }}","ax${ECMC_AXIS_NO}.enc.latchpos")"
    ecmcConfigOrDie "Cfg.LinkEcEntryToObject("{{ encoder.control }}.{{ encoder.latch.control }}","ax${ECMC_AXIS_NO}.enc.latchcontrol")"
    ecmcConfigOrDie "Cfg.LinkEcEntryToObject("{{ encoder.status }}.{{ encoder.latch.status }}","ax${ECMC_AXIS_NO}.enc.latchstatus")"
{%- endif %}
{%- if encoder.filter.velocity is defined %}    
        ecmcConfigOrDie "Cfg.SetAxisEncVelFilterSize(${ECMC_AXIS_NO},{{ encoder.filter.velocity.size|default(100) }})"    
        ecmcConfigOrDie "Cfg.SetAxisEncVelFilterEnable(${ECMC_AXIS_NO},{{ encoder.filter.velocity.enable|int|default(1) }})"
{%- endif %}
{%- if encoder.filter.trajectory is defined %}
    # WARNING:  Use "encoder.filter.position" instead of "encoder.filter.trajectory"
    ecmcConfigOrDie "Cfg.SetAxisEncPosFilterEnable(${ECMC_AXIS_NO},{{ encoder.filter.trajectory.enable|int|default(1) }})"
    ecmcConfigOrDie "Cfg.SetAxisEncPosFilterSize(${ECMC_AXIS_NO},{{ encoder.filter.trajectory.size|default(10) }})"
{%- endif %}

#- "encoder.filter.position" is a duplicate to "encoder.filter.trajectory" but better name
{%- if encoder.filter.position is defined %}
    ecmcConfigOrDie "Cfg.SetAxisEncPosFilterEnable(${ECMC_AXIS_NO},{{ encoder.filter.position.enable|int|default(1) }})"
    ecmcConfigOrDie "Cfg.SetAxisEncPosFilterSize(${ECMC_AXIS_NO},{{ encoder.filter.position.size|default(10) }})"
{%- endif %}

#- Use this encoder as primary?!
{%- if encoder.primary is defined %}
    {%- if encoder.primary >0 %}
        ecmcConfigOrDie "Cfg.SelectAxisEncPrimary(${ECMC_AXIS_NO},${ECMC_ENC_CFG_ID=1})"
    {%- endif %}
{%- endif %}

{%- if epics is defined %}
    {%- if epics.unit %}
        epicsEnvSet(ENC_EGU,'{{ epics.unit }}')
    {%- endif %}
{%- endif %}

#- If defined then use this EGU
{%- if encoder.unit %}
    epicsEnvSet(ENC_EGU,'{{ encoder.unit }}')
{%- endif %}

{%- if encoder.desc %}
    epicsEnvSet(ENC_DESC,'{{ encoder.desc }}')
{%- endif %}

{% if encoder.homing -%}
    #- =============================================================================
    #- Homing
    #- =============================================================================
    {%- if encoder.homing.position is defined %}
        ecmcConfigOrDie "Cfg.SetAxisHomePosition(${ECMC_AXIS_NO},{{ encoder.homing.position }})"
        epicsEnvSet(HOME_POS, {{ encoder.homing.position }})
    {%- endif %}
    {%- if encoder.homing.postMoveEnable %}
        ecmcConfigOrDie "Cfg.SetAxisHomePostMoveEnable(${ECMC_AXIS_NO},{{ encoder.homing.postMoveEnable|int }})"
        ecmcConfigOrDie "Cfg.SetAxisHomePostMoveTargetPosition(${ECMC_AXIS_NO},{{ encoder.homing.postMovePosition|default(0)}})"
        epicsEnvSet(POST_ENA, {{ encoder.homing.postMoveEnable|int }})
        epicsEnvSet(POST_POS, {{ encoder.homing.postMovePosition|default(0) }})
    {%- endif %}
    {%- if encoder.homing.latchCount is defined %}
        ecmcConfigOrDie "Cfg.SetAxisHomeLatchCountOffset(${ECMC_AXIS_NO},{{ encoder.homing.latchCount }})"
    {%- endif %}
    {#- velocities  #}
    {%- if encoder.homing.velocity is defined %}
        {%- if encoder.homing.velocity.to is defined %}
            ecmcConfigOrDie "Cfg.SetAxisHomeVelTowardsCam(${ECMC_AXIS_NO},{{ encoder.homing.velocity.to }})"
            epicsEnvSet(VEL_TO_CAM, {{ encoder.homing.velocity.to }})
            #- Set default of VEL_FRM_CAM to VEL_TO_CAM
            epicsEnvSet(VEL_FRM_CAM, {{ encoder.homing.velocity.from|default(encoder.homing.velocity.to) }})
            ecmcConfigOrDie "Cfg.SetAxisHomeVelOffCam(${ECMC_AXIS_NO},{{ encoder.homing.velocity.from|default(encoder.homing.velocity.to) }})"
        {%- endif %}
    {%- endif %}
        {%- if encoder.homing.timeout %}
        ecmcConfigOrDie "Cfg.SetAxisSeqTimeout(${ECMC_AXIS_NO},{{ encoder.homing.timeout }})"
    {%- endif %}

    {%- if encoder.homing.refToEncIDAtStartup is defined %}
        ecmcConfigOrDie "Cfg.SetAxisEncRefToOtherEncAtStartup(${ECMC_AXIS_NO},{{ encoder.homing.refToEncIDAtStartup }})"
        epicsEnvSet(REF_STRT, {{ encoder.homing.refToEncIDAtStartup }})
    {%- endif %}

    {%- if encoder.homing.refAtHome is defined %}
        ecmcConfigOrDie "Cfg.SetAxisEncEnableRefAtHome(${ECMC_AXIS_NO},{{ encoder.homing.refAtHome }})"
        epicsEnvSet(REF_HME, {{ encoder.homing.refAtHome }})
    {%- endif %}

    {%- if encoder.homing.tolToPrim is defined %}
        ecmcConfigOrDie "Cfg.SetAxisEncMaxDiffToPrimEnc(${ECMC_AXIS_NO},{{ encoder.homing.tolToPrim }})"
    {%- endif %}

    {%- if encoder.homing.type is defined %}
        ecmcConfigOrDie "Cfg.SetAxisHomeSeqId(${ECMC_AXIS_NO},{{ encoder.homing.type }})"
        epicsEnvSet(HOME_PROC, {{ encoder.homing.type }})
    {%- endif %}
    
    #- ecmcConfigOrDie "Cfg.SelectAxisEncHome(${ECMC_AXIS_NO},-1)"
    
    #- Need to write to env vars to also support legacy syntax ("homing." vs #encoder.homing.")
    {%- if encoder.homing.acceleration is defined %}
       epicsEnvSet(ACC, {{ encoder.homing.acceleration }})
    {%- endif %}
    {%- if encoder.homing.deceleration is defined %}
       epicsEnvSet(DEC, {{ encoder.homing.deceleration }})
    {%- endif %}
    
    {%- if encoder.homing.trigg is defined and  encoder.homing.ready %}
       ecmcConfigOrDie "Cfg.LinkEcEntryToObject("{{ encoder.homing.trigg }}","ax${ECMC_AXIS_NO}.enc.homing_trigg")"
       ecmcConfigOrDie "Cfg.LinkEcEntryToObject("{{ encoder.homing.ready }}","ax${ECMC_AXIS_NO}.enc.homing_stat")"
    {%- endif %}
{%- endif %}

{%- if encoder.lookuptable is defined %}
    ecmcConfigOrDie "Cfg.LoadAxisEncLookupTable(${ECMC_AXIS_NO},{{ encoder.lookuptable.filename }})"
    {%- if encoder.lookuptable.range is defined %}
        ecmcConfigOrDie "Cfg.SetAxisEncLookupTableRange(${ECMC_AXIS_NO},{{ encoder.lookuptable.range }})"
    {%- endif %}

    {%- if encoder.lookuptable.scale is defined %}
        ecmcConfigOrDie "Cfg.SetAxisEncLookupTableScale(${ECMC_AXIS_NO},{{ encoder.lookuptable.scale }})"
    {%- endif %}

    {%- if encoder.lookuptable.enable is defined %}
        ecmcConfigOrDie "Cfg.SetAxisEncLookupTableEnable(${ECMC_AXIS_NO},{{ encoder.lookuptable.enable|int }})"
    {%- endif %}
{%- endif %}

{%- if encoder.delayComp is defined %}
    {%- if encoder.delayComp.enable is defined %}
        ecmcConfigOrDie "Cfg.SetAxisEncDelayCyclesAndEnable(${ECMC_AXIS_NO},{{ encoder.delayComp.time }},{{encoder.delayComp.enable|int }})"
    {%- else  %}
        #- Auto enable if only delay is set.
        ecmcConfigOrDie "Cfg.SetAxisEncDelayCyclesAndEnable(${ECMC_AXIS_NO},{{ encoder.delayComp.time }},1)"
    {%- endif %}
{%- endif %}

{%- if encoder.useAsCSPDrvEnc is defined %}
    {%- if encoder.useAsCSPDrvEnc > 0 %}
        ecmcConfigOrDie "Cfg.SelectAxisEncCSPDrv(${ECMC_AXIS_NO},${ECMC_ENC_CFG_ID=1})"
        epicsEnvSet(ECMC_AX_DRV_MODE, "CSP_PC_ENC_0${ECMC_ENC_CFG_ID=1}")
    {%- endif %}
{%- endif %}
