#- =============================================================================
#- EPICS
#- =============================================================================
#- -----------------------------------------------------------------------------
#- Axis records
ecmcFileExist("ecmcAxis.db",1,1)

#- Set DRVX fields of TgtPosCmd and TgtVelCmd pvs if needed
ecmcEpicsEnvSetCalcTernary(V_DRVL,"{{ monitoring.velocity.enable|default(0)|int }}>0",-{{ monitoring.velocity.max|default(0.0) }} ,0)
ecmcEpicsEnvSetCalcTernary(V_DRVH,"{{ monitoring.velocity.enable|default(0)|int }}>0",{{ monitoring.velocity.max|default(0.0) }} ,0)

{%- set homing = None if homing is undefined else homing%}
dbLoadRecords("ecmcAxis.db","P=${ECMC_PREFIX},AXIS_NAME='{{ epics.name }}',EGU='{{ epics.unit }}',PREC={{ epics.precision }},AXIS_NO={{ axis.id }},HOMEPROC={{ homing.type|default(0)|int }},PORT=${ECMC_ASYN_PORT},ADDR=0,TIMEOUT=1,T_SMP_MS=${ECMC_SAMPLE_RATE_MS},TSE=${ECMC_TSE},VELO={{ trajectory.axis.velocity }},V_DRVL=${V_DRVL=0},V_DRVH=${V_DRVH=0}")
#- Cleanup if needed
epicsEnvUnset(V_DRVL)
epicsEnvUnset(V_DRVH)

{%- if (homing) and (encoder.homing) %}
   # ERROR: Duplicate homing parameters identified (homing and encoder.homing)
   #        Homing parameters can only be defined at one place
   ecmcExit
{%- endif %}

# Add encoder PVS (always encoder number 1 (first encoder))
#- {%- if homing is defined %}
#-    {% include 'homing.jinja2' %}
#- {%- else %}
#-    {% include 'encoder.jinja2' %}
#- {%- endif %}

ecmcFileExist("ecmcEnc.db",1,1)
dbLoadRecords("ecmcEnc.db","P=${ECMC_PREFIX},AXIS_NAME='{{ epics.name }}',AXIS_NO={{ axis.id }},ENC_NO=1,PORT=${ECMC_ASYN_PORT},ADDR=0,TIMEOUT=1,T_SMP_MS=${ECMC_SAMPLE_RATE_MS},TSE=${ECMC_TSE},EGU=${ENC_EGU=},DESC=${ENC_DESC=},HOME_PROC=${HOME_PROC=0},VEL_TO_CAM=${VEL_TO_CAM=0},VEL_FRM_CAM=${VEL_FRM_CAM=0},ACC=${ACC=-1},DEC=${DEC=-1},REF_HME=${REF_HME=-1},REF_STRT=${REF_STRT=-1},POST_ENA=${POST_ENA=-1},POST_POS=${POST_POS=0},POS=${HOME_POS=0}")

#- -----------------------------------------------------------------------------
#- Set ECMC_MOTOR_NAME needed by addEncoder script (if executed afterwards)
epicsEnvSet(ECMC_MOTOR_NAME, {{ epics.name }})
#- -----------------------------------------------------------------------------
ecmcFileExist("ecmcAxisType.db",1,1)
#- special PVs for commissioning only add if the ECMC_ENG_MODE_CMD is set to 1 in startup.cmd, Only load PID for physical axis
{%- if axis.type == 1 %}
   #- Physical axis
   ${ECMC_ENG_MODE_CMD="#-"}ecmcFileExist("ecmcAxisCommission.db",1,1)
   ${ECMC_ENG_MODE_CMD="#-"}dbLoadRecords("ecmcAxisCommission.db","P=${ECMC_PREFIX},AXIS_NAME='{{ epics.name }}',AXIS_NO={{ axis.id }},KP={{ controller.Kp }},KI={{ controller.Ki }},KD={{ controller.Kd }},KFF={{ controller.Kff }},PORT=${ECMC_ASYN_PORT},ADDR=0,TIMEOUT=1,T_SMP_MS=${ECMC_SAMPLE_RATE_MS},TSE=${ECMC_TSE},PORT=${ECMC_ASYN_PORT},ADDR=0,TIMEOUT=1")
   dbLoadRecords("ecmcAxisType.db","P=${ECMC_PREFIX},AXIS_NAME='{{ epics.name }}',AXIS_TYPE={{  axis.type|default(0)|int }},DRV_TYPE={{ drive.type|default(0)|int }},TRAJ_TYPE={{ trajectory.type }}")
{%- else%}
   #- Virtual axis
   dbLoadRecords("ecmcAxisType.db","P=${ECMC_PREFIX},AXIS_NAME='{{ epics.name }}',AXIS_TYPE={{  axis.type|default(0)|int }},DRV_TYPE=-1,TRAJ_TYPE={{ trajectory.type }}")
{%- endif%}
#-Add info in MCU namespace for auto gui generation
ecmcFileExist("ecmcMcuAxisInfo.db",1,1)
dbLoadRecords("ecmcMcuAxisInfo.db","P=${SM_PREFIX},DEV=${ECMC_PREFIX},AXIS_NAME='{{ epics.name }}',AXIS_NO={{ axis.id }}")

epicsEnvSet(ECMC_AXIS_NO,{{ axis.id }})

#- Below for facilitate auto gui generation
# Do not set NxtObj "pointer" if this is the first axis (ECMC_PREV_AXIS_OBJ_ID==-1)
ecmcEpicsEnvSetCalcTernary(ECMC_EXE_NEXT_AX,"${ECMC_PREV_AXIS_OBJ_ID=-1}>=0", "","#- ")
${ECMC_EXE_NEXT_AX}ecmcFileExist(ecmcAxPrevAxis.db,1,1)
${ECMC_EXE_NEXT_AX}dbLoadRecords(ecmcAxPrevAxis.db,"NEXT_OBJ_ID=${ECMC_AXIS_NO=-1},PREV_ECMC_P=${ECMC_PREV_AXIS_P=""}")
epicsEnvUnset(ECMC_EXE_NEXT_AX)

#- If this is the first added slave then store value in P:MCU-Cfg-AX-FrstObj
ecmcEpicsEnvSetCalcTernary(ECMC_EXE_FIRST_AX,"${ECMC_PREV_AXIS_OBJ_ID=-1}<0", "","#- ")
${ECMC_EXE_FIRST_AX}ecmcFileExist(ecmcAxFirstAxis.db,1,1)
${ECMC_EXE_FIRST_AX}dbLoadRecords(ecmcAxFirstAxis.db,"P=${ECMC_PREFIX},FIRST_OBJ_ID=${ECMC_AXIS_NO}")
epicsEnvUnset(ECMC_EXE_FIRST_AX)

#- Store info to populate the ECMC_P-NxtObj "pointer" of next added axis
epicsEnvSet(ECMC_PREV_AXIS_P,"$(ECMC_PREFIX)MCU-Cfg-AX${ECMC_AXIS_NO}-")
epicsEnvSet(ECMC_PREV_AXIS_OBJ_ID,${ECMC_AXIS_NO})
