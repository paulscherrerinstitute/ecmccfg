<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>general on ecmccfg</title><link>https://paulscherrerinstitute.github.io/ecmccfg/manual/general_cfg/</link><description>Recent content in general on ecmccfg</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://paulscherrerinstitute.github.io/ecmccfg/manual/general_cfg/index.xml" rel="self" type="application/rss+xml"/><item><title>data storage buffer</title><link>https://paulscherrerinstitute.github.io/ecmccfg/manual/general_cfg/data_storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paulscherrerinstitute.github.io/ecmccfg/manual/general_cfg/data_storage/</guid><description>data storage examples This dir contains two examples: here.
Continuously add value to data storage. Push to epics by hw trigger. Continuously add value to data storage. Push to epics by epics pv trigger. Data buffered data can be accessed by the &amp;ldquo;IOC_TEST:ds0-Data-Act&amp;rdquo; waveform pv (NELM 10000) Custom scale and offset can be applied to the stored values by MACROS (to the plc) in the startup file.
1 push to epics by hw trigger In this example the data stored in dataStorage 0 is pushed to epics at a falling edge of the axis 1 high limit.</description></item><item><title>iocsh utilities</title><link>https://paulscherrerinstitute.github.io/ecmccfg/manual/general_cfg/iocsh_utils/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paulscherrerinstitute.github.io/ecmccfg/manual/general_cfg/iocsh_utils/</guid><description>ECMC Iocsh Utilities Iocsh function &amp;ldquo;ecmcEpicsEnvSetCalc()&amp;rdquo; &amp;ldquo;ecmcEpicsEnvSetCalc()&amp;rdquo; is used to evaluate expressions and set result to EPCIS environment variables. Usefull for calculate:
slave offsets sdo/pdo adresses (also in hex) scalings in motion record fields &amp;hellip; ecmcEpicsEnvSetCalc -h Use &amp;quot;ecmcEpicsEnvSetCalc(&amp;lt;envVarName&amp;gt;, &amp;lt;expression&amp;gt;, &amp;lt;format&amp;gt;)&amp;quot; to evaluate the expression and assign the variable. &amp;lt;envVarName&amp;gt; : EPICS environment variable name. &amp;lt;expression&amp;gt; : Calculation expression (see exprTK for available functionality). Examples: Simple expression:&amp;quot;5.5+${TEST_SCALE}*sin(${TEST_ANGLE}/10)&amp;quot;. Use of &amp;quot;RESULT&amp;quot; variable: &amp;quot;if(${TEST_VAL}&amp;gt;5){RESULT:=100;}else{RESULT:=200;};&amp;quot;.</description></item><item><title>ecmc command reference</title><link>https://paulscherrerinstitute.github.io/ecmccfg/manual/general_cfg/ecmc_command_ref/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paulscherrerinstitute.github.io/ecmccfg/manual/general_cfg/ecmc_command_ref/</guid><description>ecmc command reference ethercat motion general misc plc</description></item><item><title>best practice</title><link>https://paulscherrerinstitute.github.io/ecmccfg/manual/general_cfg/best_practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paulscherrerinstitute.github.io/ecmccfg/manual/general_cfg/best_practice/</guid><description>EtherCAT rate (EC_RATE) The default EtherCAT frame rate in ecmc is set to 1kHz. For most applications this is however not needed and can therefore be reduced. A reduced EtherCAT rate reduces the load on the controller. In general, a good value for the frame rate is in the range 100Hz to 1kHz. For motion systems, a frame rate of 100Hz..500Hz is normally enough. Rates outside the 100Hz..1kHz range is normally not a good idea, and some slaves might not support it.</description></item></channel></rss>