record(motor,"$(PREFIX)$(MOTOR_NAME)")
{
    field(DESC, "$(DESC)")
    field(DTYP, "asynMotor")
    field(DIR,  "$(DIR=0)")
    field(VELO, "$(VELO=0)")
    field(JVEL, "$(JVEL=0)")
    field(VBAS, "$(VBAS=0)")
    field(ACCL, "$(ACCL=0)")
    field(ACCS, "$(ACCS=0)")
    field(JAR,  "$(JAR=0)")
    field(BDST, "$(BDST=0)")
    field(DLY,  "$(DLY=0)")
    field(BVEL, "$(BVEL=0)")
    field(BACC, "$(BACC=0)")
    field(OUT,  "@asyn($(MOTOR_PORT),$(AXIS_NO))")
    field(MRES, "$(MRES=1)")
    field(ERES, "$(ERES=0)")
    field(PREC, "$(PREC=3)")
    field(EGU,  "$(EGU=mm)")
    field(DHLM, "$(DHLM=0)")
    field(DLLM, "$(DLLM=0)")
    field(RDBD, "$(RDBD=0)")
    field(RTRY, "$(RTRY=1)")
    field(RMOD, "$(RMOD=3)")
    field(DLY,  "$(DLY=0)")
    field(OFF, "$(OFF=0)")
    field(FOFF, "$(FOFF=0)")
    field(NTM,  "$(NTM=1)")
    field(TWV,  "$(TWV=1)")
    field(RDBL, "$(RDBL=)")
    field(UEIP, "$(UEIP=0)")
    field(URIP, "$(URIP=0)")
    field(RRES, "$(RRES=0)")
    field(SREV, "$(SREV=1)")
    field(UREV, "$(UREV=1.0)")
    field(VMAX, "$(VMAX=0)")
    field(SPAM, "$(SPAM=15)")
}

# The message text
record(stringin,"$(PREFIX)$(MOTOR_NAME)-MsgTxt") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_MESSAGE_TEXT")
    field(SCAN, "I/O Intr")
}

# Debug message in IOC log
record(stringout,"$(PREFIX)$(MOTOR_NAME)-DbgStrToLOG") {
    field(DESC, "Log String in IOC log")
    field(VAL,  "")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn($(MOTOR_PORT),$(AXIS_NO))StrToLOG")
}

# These records make the motor resolution, offset and direction available to the driver
# which is needed for profile moves and other applications

# Motor direction for this axis
record(longout, "$(PREFIX)$(MOTOR_NAME)-DIR_") {
    field(DESC, "$(MOTOR_NAME) direction")
    field(DOL,  "$(PREFIX)$(MOTOR_NAME).DIR CP MS")
    field(OMSL, "closed_loop")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_REC_DIRECTION")
}

record(ai, "$(PREFIX)$(MOTOR_NAME)-Vel-RB")
{
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))Vel-RB")
    field(SCAN, "I/O Intr")
}

record(ai, "$(PREFIX)$(MOTOR_NAME)-Acc-RB")
{
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))Acc-RB")
    field(SCAN, "I/O Intr")
}

record(ai, "$(PREFIX)$(MOTOR_NAME)-EncAct")
{
    field(DTYP, "asynFloat64")
    field(PREC, "0")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))EncAct")
    field(SCAN, "I/O Intr")
}

record(longin, "$(PREFIX)$(MOTOR_NAME)-MR-ErrId")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))ErrId")
    field(SCAN, "I/O Intr")
}

record(longout,"$(PREFIX)$(MOTOR_NAME)-ErrRst") {
    field(DESC, "Error Reset")
    field(VAL,  0)
    field(DTYP, "asynInt32")
    field(PINI, "YES")
    field(OUT,  "@asyn($(MOTOR_PORT),$(AXIS_NO))ErrRst")
}

# Motor offset for this axis
record(ao,"$(PREFIX)$(MOTOR_NAME)-OFF_") {
    field(DESC, "$(MOTOR_NAME) offset")
    field(DOL,  "$(PREFIX)$(MOTOR_NAME).OFF CP MS")
    field(OMSL, "closed_loop")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(OUT,  "@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_REC_OFFSET")
}


# Motor resolution for this axis
record(ao,"$(PREFIX)$(MOTOR_NAME)-MRES_") {
    field(DESC, "$(MOTOR_NAME) resolution")
    field(DOL,  "$(PREFIX)$(MOTOR_NAME).MRES CP MS")
    field(OMSL, "closed_loop")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(OUT,  "@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_REC_RESOLUTION")
}

record(ai,"$(PREFIX)$(MOTOR_NAME)-CfgSREV-RB") {
    field(DESC, "Micro Steps / Revolution")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgSREV-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(PREFIX)$(MOTOR_NAME)-CfgUREV-RB") {
    field(DESC, "EGU / Revolution")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgUREV-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(PREFIX)$(MOTOR_NAME)-CfgPMIN-RB") {
    field(DESC, "Absolute Minimum")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgPMIN-RB")
    field(SCAN, "I/O Intr")
}
record(ai,"$(PREFIX)$(MOTOR_NAME)-CfgPMAX-RB") {
    field(DESC, "Absolute Maximum")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgPMAX-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(PREFIX)$(MOTOR_NAME)-CfgSPDB-RB") {
    field(DESC, "Set point dead band window")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgSPDB-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(PREFIX)$(MOTOR_NAME)-CfgRDBD-RB") {
    field(DESC, "In target position window")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgRDBD-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(PREFIX)$(MOTOR_NAME)-CfgRDBD-Tim-RB") {
    field(DESC, "In target position time")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgRDBD-Tim-RB")
    field(SCAN, "I/O Intr")
}

record(longin,"$(PREFIX)$(MOTOR_NAME)-CfgRDBD-En-RB") {
    field(DESC, "In target position enabled")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgRDBD-En-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(PREFIX)$(MOTOR_NAME)-CfgPOSLAG-RB") {
    field(DESC, "In target position window")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgPOSLAG-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(PREFIX)$(MOTOR_NAME)-CfgPOSLAG-Tim-RB") {
    field(DESC, "In target position time")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgPOSLAG-Tim-RB")
    field(SCAN, "I/O Intr")
}

record(longin,"$(PREFIX)$(MOTOR_NAME)-CfgPOSLAG-En-RB") {
    field(DESC, "In target position enabled")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgPOSLAG-En-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(PREFIX)$(MOTOR_NAME)-CfgDHLM-RB") {
    field(DESC, "EC High Soft Limit RB")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgDHLM")
    field(SCAN, "I/O Intr")
}

record(ai,"$(PREFIX)$(MOTOR_NAME)-CfgDLLM-RB") {
    field(DESC, "EC Low Soft Limit RB")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgDLLM")
    field(SCAN, "I/O Intr")
}

record(longin,"$(PREFIX)$(MOTOR_NAME)-CfgDHLM-En-RB") {
    field(DESC, "EC High Soft Limit enabled RB")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgDHLM-En")
    field(SCAN, "I/O Intr")
}

record(longin,"$(PREFIX)$(MOTOR_NAME)-CfgDLLM-En-RB") {
    field(DESC, "EC Low Soft Limit enabled RB")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgDLLM-En")
    field(SCAN, "I/O Intr")
}

# Config records, the values will be pushed into the motor record fields

record(ai, "$(PREFIX)$(MOTOR_NAME)-CfgVELO-RB")
{
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgVELO")
    field(SCAN, "I/O Intr")
}

record(ai, "$(PREFIX)$(MOTOR_NAME)-CfgVMAX-RB")
{
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgVMAX")
    field(SCAN, "I/O Intr")
}


record(ai, "$(PREFIX)$(MOTOR_NAME)-CfgJVEL-RB")
{
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgJVEL")
    field(SCAN, "I/O Intr")
}

record(ai, "$(PREFIX)$(MOTOR_NAME)-CfgACCS-RB")
{
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgACCS")
    field(SCAN, "I/O Intr")
}

record(mbbi,"$(PREFIX)$(MOTOR_NAME)-HomProc-RB") {
    field(DESC,"Homing procedure")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))HomProc-RB")
    field(SCAN, "I/O Intr")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(FVVL, "5")
    field(SXVL, "6")
    field(SVVL, "7")
    field(EIVL, "8")
    field(NIVL, "9")
    field(TEVL, "10")
    field(ELVL, "11")
    field(TVVL, "12")
    field(TTVL, "13")
    field(FTVL, "14")
    field(FFVL, "15")

    field(ZRST, "NotHomable")
    field(ONST, "LimBwd")
    field(TWST, "LimFwd")
    field(THST, "HSfwdfromLimBwd")
    field(FRST, "HSbwdfromLimFwd")
    field(FVST, "HSmidfromLimBwd")
    field(SXST, "HSmidfromLimFwd")
    field(SVST, "HSbwd")
    field(EIST, "HSfwd")
    field(NIST, "HSmidBwd")
    field(TEST, "HSmidFwd")
    field(ELST, "IndexNfromLimBwd")
    field(TVST, "IndexNfromLimFwd")
    field(TTST, "HomeSwiLeftRight")
    field(FTST, "Homable")
    field(FFST, "ManSetPos")
}

record(ai,"$(PREFIX)$(MOTOR_NAME)-HomPos-RB") {
    field(DESC, "Home Position")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))HomPos-RB")
    field(SCAN, "I/O Intr")
}

record (asyn, "$(PREFIX)$(MOTOR_NAME)-$(MOTOR_PORT)-asyn")
{
}

################################################################
# Sync and stop on interlock
record(calcout,"$(PREFIX)$(MOTOR_NAME)-MR-SyncTrgH2L"){
  #field(PINI, "1")
  field(DESC, "Trigg MR Sync")
  field(SCAN, "Passive")
  field(INPA,  "$(PREFIX)$(MOTOR_NAME)-SumIlockBwd CP")
  field(INPB,  "$(PREFIX)$(MOTOR_NAME)-SumIlockFwd CP")
  field(INPC,  "1")
  field(CALC,  "A && B")
  field(OCAL,  "C")
  field(DOPT,  "Use OCAL")
  field(OOPT,  "Transition To Zero")
  field(OUT,   "$(PREFIX)$(MOTOR_NAME)-MR-SyncTrgSeq PP")
}

record(calcout,"$(PREFIX)$(MOTOR_NAME)-MR-SyncTrgL2H"){
  #field(PINI, "1")
  field(DESC, "Trigg MR Sync")
  field(SCAN, "Passive")
  field(INPA,  "$(PREFIX)$(MOTOR_NAME)-SumIlockBwd CP")
  field(INPB,  "$(PREFIX)$(MOTOR_NAME)-SumIlockFwd CP")
  field(INPC,  "1")
  field(CALC,  "A && B")
  field(OCAL,  "C")
  field(DOPT,  "Use OCAL")
  field(OOPT,  "Transition To Non-zero")
  field(OUT,   "$(PREFIX)$(MOTOR_NAME)-MR-SyncTrgSeq PP")
}

record(seq, "$(PREFIX)$(MOTOR_NAME)-MR-SyncTrgSeq") {
    field(DESC, "Trigg MR Sync")
    field(PINI, "1")

    field(DO1,  "0")
    field(DO2,  "1")
    field(DO3,  "1")
    field(DO4,  "0")

    field(DLY1, "0.01")
    field(DLY2, "0.01")
    field(DLY3, "0.01")
    field(DLY4, "0.01")

    field(LNK1, "$(PREFIX)$(MOTOR_NAME).SYNC PP")
    field(LNK2, "$(PREFIX)$(MOTOR_NAME).SYNC PP")
    field(LNK3, "$(PREFIX)$(MOTOR_NAME).STOP PP")
    field(LNK4, "$(PREFIX)$(MOTOR_NAME).SYNC PP")
}

record(seq, "${PREFIX}${MOTOR_NAME}-StpCmd_") {
  field(DESC, "Stop Axis")    
  field(DOL1, "${PREFIX}${MOTOR_NAME}-StpCmd CP")  
  field(DO2,  "1")
  field(LNK1, "")
  field(LNK2, "${PREFIX}${MOTOR_NAME}.STOP PP")
}

################################################################
# Sync only
record(longin,"${PREFIX}${MOTOR_NAME}-SyncMrCmd"){
  field(DESC, "${MOTOR_NAME}: Sync MR")  
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))TRIGG_SYNC")
  field(SCAN, "I/O Intr")
  field(FLNK, "${PREFIX}${MOTOR_NAME}-MR-SyncOnly.PROC")
  field(TSE,  "$(TSE=-2)")
}

record(seq, "$(PREFIX)$(MOTOR_NAME)-MR-SyncOnly") {
    field(DESC, "Trigg MR Sync")
    field(PINI, "1")
    field(DO1,  "0")
    field(DO2,  "1")
    field(DLY1, "0.01")
    field(DLY2, "0.01")
    field(LNK1, "$(PREFIX)$(MOTOR_NAME).SYNC PP")
    field(LNK2, "$(PREFIX)$(MOTOR_NAME).SYNC PP")
}

# New: Commands from ecmc 2 MR (STOP, SYNC, CNEN)
# typedef struct {
#   unsigned char stopMRCmd      : 1;  // Trigger command
#   unsigned char stopMRVal      : 1;  // STOP value
#   unsigned char syncMRCmd      : 1;  // Trigger command
#   unsigned char syncMRVal      : 1;  // SYNC value
#   unsigned char cnenMRCmd      : 1;  // Trigger command
#   unsigned char cnenMRVal      : 1;  // CNEN value
#   unsigned int dummy           : 26;
# } ecmcMRCmds;

record(mbbiDirect,"${PREFIX}${MOTOR_NAME}-ECMC2MR-Cmd"){
  field(DESC, "${MOTOR_NAME}: ECMC to MR cmds")
  field(PINI, "$(PINI=1)")
  field(DTYP, "asynUInt32Digital")
  field(INP,  "@asynMask($(ECMC_PORT),$(ADDR=0),0xFFFF,$(TIMEOUT=1))T_SMP_MS=$(T_SMP_MS=1000)/TYPE=asynUInt32Digital/ax$(AXIS_NO).mr_cmd?")
  field(SCAN, "I/O Intr")
  field(TSE,  "$(TSE=-2)")
  field(FLNK, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Stop.PROC")
}

record(calc,  "${PREFIX}${MOTOR_NAME}-ECMC2MR-Stop") {
  field(DESC, "${MOTOR_NAME}: MR Stop")
  field(PINI, "$(PINI=1)")
  field(CALC, "A & 0x1")
  field(INPA, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cmd")
  field(FLNK, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Sync.PROC")
}

record(calc,  "${PREFIX}${MOTOR_NAME}-ECMC2MR-Sync") {
  field(DESC, "${MOTOR_NAME}: MR Sync")
  field(PINI, "$(PINI=1)")
  field(CALC, "A >> 2 & 0x1")
  field(INPA, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cmd")
  field(FLNK, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cnen.PROC")
}

record(calc,  "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cnen") {
  field(DESC, "${MOTOR_NAME}: MR Cnen")
  field(PINI, "$(PINI=1)")
  field(CALC, "A >> 4 & 0x1")
  field(INPA, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cmd")
}

record(seq,   "${PREFIX}${MOTOR_NAME}-ECMC2MR-Stop_") {
  field(DESC, "Axis: STOP")    
  field(DOL1, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Stop CP")
  field(DOL2, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cmd.B1")
  field(LNK2, "${PREFIX}${MOTOR_NAME}.STOP PP")
}

record(seq,   "${PREFIX}${MOTOR_NAME}-ECMC2MR-Sync_") {
  field(DESC, "Axis: SYNC")    
  field(DOL1, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Sync CP")
  field(DOL2, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cmd.B3")
  field(LNK2, "${PREFIX}${MOTOR_NAME}.SYNC PP")
}

record(seq,   "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cnen_") {
  field(DESC, "Axis: CNEN")    
  field(DOL1, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cnen CP")
  field(DOL2, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cmd.B5")
  field(LNK2, "${PREFIX}${MOTOR_NAME}.CNEN PP")
}

# Monitor of mbbi bits seems to not work?!
#record(seq,   "${PREFIX}${MOTOR_NAME}-ECMC2MR-Stp") {
#  field(DESC, "Axis: STOP")    
#  field(DOL1, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cmd.B0 CP")
#  field(DOL2, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cmd.B1 CP")
#  field(LNK1, "")
#  field(LNK2, "${PREFIX}${MOTOR_NAME}.STOP PP")
#}
#
## Monitor Sync command and issue SYNC
#record(seq,   "${PREFIX}${MOTOR_NAME}-ECMC2MR-Sync") {
#  field(DESC, "Axis: SYNC")    
#  field(DOL1, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cmd.B2 CP")
#  field(DOL2, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cmd.B3 CP")
#  field(LNK1, "")
#  field(LNK2, "${PREFIX}${MOTOR_NAME}.SYNC PP")
#}
#
## Monitor CNEN command and issue CNEN
#record(seq,   "${PREFIX}${MOTOR_NAME}-ECMC2MR-Sync") {
#  field(DESC, "Axis: CNEN")
#  field(DOL1, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cmd.B4 CP")
#  field(DOL2, "${PREFIX}${MOTOR_NAME}-ECMC2MR-Cmd.B5 CP")
#  field(LNK1, "")
#  field(LNK2, "${PREFIX}${MOTOR_NAME}.CNEN PP")
#}
